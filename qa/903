#!/bin/sh
# PCP QA Test No. 903
# Exercise the PAPI PMDA Install/Remove process.
#
# Copyright (c) 2014 Red Hat.
#

seq=`basename $0`
echo "QA output created by $seq"

# get standard environment, filters and checks
. ./common.product
. ./common.filter
. ./common.check

[ -d $PCP_PMDAS_DIR/papi ] || _notrun "PAPI PMDA is not installed"

status=1	# failure is the default!
$sudo rm -rf $tmp.* $seq.full
trap "cd $here; rm -rf $tmp.*; exit \$status" 0 1 2 3 15

_filter_papi()
{
    # cull message resulting from no papi metrics
    grep -v 'Missing metric value(s)' | \
    grep -v 'No value(s) available' | \
    grep -v 'papi.control.reset: .* not yet .*'
}

pmdapapi_remove()
{
    echo
    echo "=== remove PAPI agent ==="
    $sudo ./Remove >$tmp.out 2>&1
    _filter_pmda_remove <$tmp.out
}

pmdapapi_install()
{
    # start from known starting points
    cd $PCP_PMDAS_DIR/papi
    $sudo ./Remove >/dev/null 2>&1
    $sudo $PCP_RC_DIR/pmcd stop | _filter_pcp_stop

    echo
    echo "=== PAPI agent installation ==="
    $sudo ./Install </dev/null >$tmp.out 2>&1
    # some warnings are reasonable (e.g., too many concurrent counters)
    num_metrics=`$sudo pminfo -f papi.available.num_counters | grep value | awk '{print $2}'`
    if [ -z "$num_metrics" ] || [ "$num_metrics" -eq "0" ]; then
        _notrun "PAPI metrics not found on hardware"
    fi
    # Check papi metrics have appeared ... X metrics and Y values
    _filter_pmda_install <$tmp.out \
    | sed \
        -e '/^Waiting for pmcd/s/\.\.\.[. ]*$/DOTS/' \
        -e 's/[0-9][0-9]* warnings, //' \
    | $PCP_AWK_PROG '
/Check papi metrics have appeared/   { if ($7 >= 7 && $7 <= 2500) $7 = "X"
                                       if ($10 >= 0 && $10 <= 2500) $10 = "Y"
                                     }
                                     { print }'
}

_prepare_pmda papi
trap "_cleanup_pmda papi; exit \$status" 0 1 2 3 15

# real QA test starts here
pmdapapi_install

# pmcd should have been started by the Install process - check
if $sudo pminfo -v papi > $tmp.info 2> $tmp.err
then
    :
else
    echo "... failed! ... here is the Install log ..."
    cat $tmp.out
fi
cat $tmp.info $tmp.err | _filter_papi

pmdapapi_remove
status=0
exit
